name: CI
on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    defaults:
      run:
        shell: bash
   
    steps:
      - uses: actions/checkout@v4
     
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'
     
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
     
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
     
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc@13
          echo "CC=$(brew --prefix gcc@13)/bin/gcc-13" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix gcc@13)/bin/g++-13" >> $GITHUB_ENV
     
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin pytest
     
      - name: Install and compile CmdStan (Unix)
        if: runner.os != 'Windows'
        run: |
          pip install cmdstanpy
          python -c "import cmdstanpy; cmdstanpy.install_cmdstan(compiler=True, verbose=True)"
        env:
          STAN_BACKEND: CMDSTANPY
     
      - name: Install CmdStan (Windows)
        if: runner.os == 'Windows'
        run: |
          pip install cmdstanpy
          python -c "import cmdstanpy; cmdstanpy.install_cmdstan()"
        continue-on-error: true
     
      - name: Build and install package
        run: |
          maturin build --release
          pip install target/wheels/*.whl
     
      - name: Run Python tests (Unix)
        if: runner.os != 'Windows'
        run: pytest tests/ -v
     
      - name: Run Python tests (Windows - skip Stan)
        if: runner.os == 'Windows'
        run: pytest tests/ -v -k "not stan"
     
      - name: Run Rust tests
        run: cargo test --all-features
 
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
     
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
     
      - name: Check formatting
        run: cargo fmt --all -- --check
     
      - name: Run clippy
        run: cargo clippy --all-features -- -D warnings