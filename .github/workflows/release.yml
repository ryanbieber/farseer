name: Release to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read

jobs:
  # First, run all tests before building
  test:
    name: Test Python ${{ matrix.python-version }} on Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    defaults:
      run:
        shell: bash
   
    steps:
      - uses: actions/checkout@v4
     
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'
     
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
     
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
     
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install maturin pytest
     
      - name: Install and compile CmdStan
        run: |
          pip install cmdstanpy
          python -c "import cmdstanpy; cmdstanpy.install_cmdstan(compiler=True, verbose=True)"
        env:
          STAN_BACKEND: CMDSTANPY
     
      - name: Build and install package
        run: |
          maturin build --release
          pip install target/wheels/*.whl
     
      - name: Run Python tests
        run: pytest tests/ -v
     
      - name: Run Rust tests
        run: cargo test --all-features
  
  # Build wheels for different platforms
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: test  # Only build if tests pass
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.os == 'ubuntu-latest' && 'x86_64' || 'auto' }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist
  
  # Build source distribution
  build-sdist:
    name: Build source distribution
    needs: test  # Only build if tests pass
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist
  
  # Test PyPI upload (always runs on release)
  test-pypi-upload:
    name: Upload to Test PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment: testpypi
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: List artifacts
        run: ls -lR dist/
      
      - name: Publish to Test PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing dist/*
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
          MATURIN_REPOSITORY: testpypi
      
      - name: Wait for package to be available
        run: sleep 60
      
      - name: Test installation from Test PyPI
        run: |
          python -m pip install --upgrade pip
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ seer
          python -c "import seer; print('Successfully imported seer version:', seer.__version__)"
  
  # Production PyPI upload (only after successful Test PyPI)
  pypi-upload:
    name: Upload to PyPI
    needs: test-pypi-upload
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: List artifacts
        run: ls -lR dist/
      
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing dist/*
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
